/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import dk.sdu.mmmi.mdsd.math.MathPackage.Literals
import org.eclipse.xtext.scoping.IScope
import dk.sdu.mmmi.mdsd.math.LetExpression
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mmmi.mdsd.math.Variable
import dk.sdu.mmmi.mdsd.math.AbstractElement
import dk.sdu.mmmi.mdsd.math.MathExp
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.impl.FilteringScope
import java.util.List
import dk.sdu.mmmi.mdsd.math.VariableUse

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MathScopeProvider extends AbstractMathScopeProvider {

	override getScope(EObject context, EReference reference) {
		if (reference == Literals.VARIABLE_USE__VARIABLE_USE) {
			return context.getLocalLetVariable
		}
		return super.getScope(context, reference);
	}
	
	def IScope getLocalLetVariable(EObject context) {
		val container = context.eContainer
		return switch (container) {
			LetExpression: Scopes.scopeFor(newArrayList(container), container.getLocalLetVariable)
			MathExp: Scopes.scopeFor(container.elements.filter[it != context])
			default: container.getLocalLetVariable
		}
	}
}

/*
 * 
 */