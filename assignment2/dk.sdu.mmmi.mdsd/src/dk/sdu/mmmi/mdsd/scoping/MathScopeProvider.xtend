/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import dk.sdu.mmmi.mdsd.math.MathPackage.Literals
import org.eclipse.xtext.scoping.IScope
import dk.sdu.mmmi.mdsd.math.LetExpression
import org.eclipse.xtext.scoping.Scopes
import dk.sdu.mmmi.mdsd.math.Variable
import dk.sdu.mmmi.mdsd.math.AbstractElement
import dk.sdu.mmmi.mdsd.math.MathExp
import org.eclipse.xtext.EcoreUtil2

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MathScopeProvider extends AbstractMathScopeProvider {
	override getScope(EObject object, EReference ref) {
        switch (object){
            LetExpression case ref == Literals.VARIABLE_USE__VARIABLE_USE: {
                val letvariable = EcoreUtil2.getContainerOfType(object,LetExpression)
                return Scopes.scopeFor(#[letvariable], letvariable.baseScope())
            }
        }
        
        return super.getScope(object, ref)
    }   
    
    def IScope baseScope(EObject context) {
        val base = context
        if(base === null)
            return IScope.NULLSCOPE
        return Scopes.scopeFor(#[base], base.baseScope())
    }
}
