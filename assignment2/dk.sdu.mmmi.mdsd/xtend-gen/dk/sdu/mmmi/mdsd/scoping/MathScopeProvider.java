/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping;

import com.google.common.base.Objects;
import dk.sdu.mmmi.mdsd.math.LetExpression;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import java.util.Collections;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MathScopeProvider extends AbstractMathScopeProvider {
  @Override
  public IScope getScope(final EObject object, final EReference ref) {
    boolean _matched = false;
    if (object instanceof LetExpression) {
      boolean _equals = Objects.equal(ref, MathPackage.Literals.VARIABLE_USE__VARIABLE_USE);
      if (_equals) {
        _matched=true;
        final LetExpression letvariable = EcoreUtil2.<LetExpression>getContainerOfType(object, LetExpression.class);
        return Scopes.scopeFor(Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(letvariable)), this.baseScope(letvariable));
      }
    }
    return super.getScope(object, ref);
  }
  
  public IScope baseScope(final EObject context) {
    final EObject base = context;
    if ((base == null)) {
      return IScope.NULLSCOPE;
    }
    return Scopes.scopeFor(Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(base)), this.baseScope(base));
  }
}
