/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping;

import com.google.common.base.Objects;
import dk.sdu.mmmi.mdsd.math.LetExpression;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import dk.sdu.mmmi.mdsd.math.Variable;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MathScopeProvider extends AbstractMathScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _equals = Objects.equal(reference, MathPackage.Literals.VARIABLE_USE__VARIABLE_USE);
    if (_equals) {
      return this.getLocalLetVariable(context);
    }
    return super.getScope(context, reference);
  }
  
  public IScope getLocalLetVariable(final EObject context) {
    final EObject container = context.eContainer();
    IScope _switchResult = null;
    boolean _matched = false;
    if (container instanceof LetExpression) {
      _matched=true;
      _switchResult = Scopes.scopeFor(CollectionLiterals.<LetExpression>newArrayList(((LetExpression)container)), this.getLocalLetVariable(container));
    }
    if (!_matched) {
      if (container instanceof MathExp) {
        _matched=true;
        final Function1<Variable, Boolean> _function = (Variable it) -> {
          return Boolean.valueOf((!Objects.equal(it, context)));
        };
        _switchResult = Scopes.scopeFor(IterableExtensions.<Variable>filter(((MathExp)container).getElements(), _function));
      }
    }
    if (!_matched) {
      _switchResult = this.getLocalLetVariable(container);
    }
    return _switchResult;
  }
}
