/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import com.google.inject.Inject;
import dk.sdu.mmmi.mdsd.math.Atomic;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.LetExpression;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.MulOrDiv;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.Variable;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.util.IResourceScopeCache;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  @Inject
  private static IResourceScopeCache cache;
  
  private static Map<String, Integer> variables = new HashMap<String, Integer>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp model = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final Map<String, Integer> result = MathGenerator.compute(model);
    this.displayPanel(result);
  }
  
  public static Map<String, Integer> compute(final MathExp model) {
    EList<Variable> _elements = model.getElements();
    for (final Variable variable : _elements) {
      MathGenerator.variables.put(variable.getName(), Integer.valueOf(MathGenerator.computeExp(variable.getExpression())));
    }
    return MathGenerator.variables;
  }
  
  public static int computeExp(final Expression e) {
    Integer _switchResult = null;
    boolean _matched = false;
    if (e instanceof MulOrDiv) {
      _matched=true;
      int _xblockexpression = (int) 0;
      {
        int _computeExp = MathGenerator.computeExp(((MulOrDiv)e).getLeft());
        final Integer left = ((Integer) Integer.valueOf(_computeExp));
        int _computeExp_1 = MathGenerator.computeExp(((MulOrDiv)e).getRight());
        final Integer right = ((Integer) Integer.valueOf(_computeExp_1));
        int _xifexpression = (int) 0;
        String _op = ((MulOrDiv)e).getOp();
        boolean _equals = Objects.equal(_op, "*");
        if (_equals) {
          _xifexpression = ((left).intValue() * (right).intValue());
        } else {
          _xifexpression = ((left).intValue() / (right).intValue());
        }
        _xblockexpression = _xifexpression;
      }
      _switchResult = Integer.valueOf(_xblockexpression);
    }
    if (!_matched) {
      if (e instanceof Minus) {
        _matched=true;
        int _computeExp = MathGenerator.computeExp(((Minus)e).getLeft());
        int _computeExp_1 = MathGenerator.computeExp(((Minus)e).getRight());
        _switchResult = Integer.valueOf(((((Integer) Integer.valueOf(_computeExp))).intValue() - (((Integer) Integer.valueOf(_computeExp_1))).intValue()));
      }
    }
    if (!_matched) {
      if (e instanceof Plus) {
        _matched=true;
        int _computeExp = MathGenerator.computeExp(((Plus)e).getLeft());
        int _computeExp_1 = MathGenerator.computeExp(((Plus)e).getRight());
        _switchResult = Integer.valueOf(((((Integer) Integer.valueOf(_computeExp))).intValue() + (((Integer) Integer.valueOf(_computeExp_1))).intValue()));
      }
    }
    if (!_matched) {
      if (e instanceof LetExpression) {
        _matched=true;
        int _xblockexpression = (int) 0;
        {
          MathGenerator.variables.put(((LetExpression)e).getName(), Integer.valueOf(MathGenerator.computeExp(((LetExpression)e).getVariable())));
          _xblockexpression = MathGenerator.computeExp(((LetExpression)e).getExpression());
        }
        _switchResult = Integer.valueOf(_xblockexpression);
      }
    }
    if (!_matched) {
      if (e instanceof Atomic) {
        _matched=true;
        Integer _switchResult_1 = null;
        boolean _matched_1 = false;
        if (e instanceof VariableUse) {
          _matched_1=true;
          _switchResult_1 = MathGenerator.variables.get(((VariableUse)e).getVariableUse().getName());
        }
        if (!_matched_1) {
          if (e instanceof dk.sdu.mmmi.mdsd.math.Number) {
            _matched_1=true;
            _switchResult_1 = Integer.valueOf(((dk.sdu.mmmi.mdsd.math.Number)e).getValue());
          }
        }
        _switchResult = _switchResult_1;
      }
    }
    if (!_matched) {
      _switchResult = Integer.valueOf(MathGenerator.computeExp(((Variable) e).getExpression()));
    }
    return (_switchResult).intValue();
  }
  
  public void displayPanel(final Map<String, Integer> result) {
    String resultString = "";
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      Integer _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
    JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
}
