/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.math.impl;

import dk.sdu.mmmi.mdsd.math.AbstractElement;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import dk.sdu.mmmi.mdsd.math.VariableUse;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Variable Use</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.mmmi.mdsd.math.impl.VariableUseImpl#getVariableUse <em>Variable Use</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VariableUseImpl extends AtomicImpl implements VariableUse
{
  /**
   * The cached value of the '{@link #getVariableUse() <em>Variable Use</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariableUse()
   * @generated
   * @ordered
   */
  protected AbstractElement variableUse;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VariableUseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MathPackage.Literals.VARIABLE_USE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractElement getVariableUse()
  {
    if (variableUse != null && variableUse.eIsProxy())
    {
      InternalEObject oldVariableUse = (InternalEObject)variableUse;
      variableUse = (AbstractElement)eResolveProxy(oldVariableUse);
      if (variableUse != oldVariableUse)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MathPackage.VARIABLE_USE__VARIABLE_USE, oldVariableUse, variableUse));
      }
    }
    return variableUse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractElement basicGetVariableUse()
  {
    return variableUse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariableUse(AbstractElement newVariableUse)
  {
    AbstractElement oldVariableUse = variableUse;
    variableUse = newVariableUse;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MathPackage.VARIABLE_USE__VARIABLE_USE, oldVariableUse, variableUse));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MathPackage.VARIABLE_USE__VARIABLE_USE:
        if (resolve) return getVariableUse();
        return basicGetVariableUse();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MathPackage.VARIABLE_USE__VARIABLE_USE:
        setVariableUse((AbstractElement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MathPackage.VARIABLE_USE__VARIABLE_USE:
        setVariableUse((AbstractElement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MathPackage.VARIABLE_USE__VARIABLE_USE:
        return variableUse != null;
    }
    return super.eIsSet(featureID);
  }

} //VariableUseImpl
