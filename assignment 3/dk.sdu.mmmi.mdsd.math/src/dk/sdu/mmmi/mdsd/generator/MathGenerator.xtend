/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Div
import dk.sdu.mmmi.mdsd.math.MathNumber
import dk.sdu.mmmi.mdsd.math.Minus
import dk.sdu.mmmi.mdsd.math.Mult
import dk.sdu.mmmi.mdsd.math.Plus
import dk.sdu.mmmi.mdsd.math.VariableUse
import java.util.Map
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.Program
import dk.sdu.mmmi.mdsd.math.Expression
import dk.sdu.mmmi.mdsd.math.Method
import dk.sdu.mmmi.mdsd.math.Parenthesis
import dk.sdu.mmmi.mdsd.math.External

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {
	
	static Map<String, Integer> variables;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val program = resource.allContents.filter(Program).next
		fsa.generateFile("math_expression/" + program.name + ".java", program.compile)
	}
		
	def compile(Program program){
		'''
		package math_expression;
		
		public class «program.name» {
			«FOR varBinding: program.mathExps.variables»
			public int «varBinding.name»;
			«ENDFOR»
			
			public void compute() {
				«FOR varBinding: program.mathExps.variables»
				«varBinding.name» = «varBinding.expression.resolve»;
				«ENDFOR»
			}
		}
		'''
	}
	
	def String resolve(Expression expression){
		var output = ""
		switch (expression) {
			MathNumber: output += expression.value
			Parenthesis: output += '''( «expression.exp.resolve» )'''
			VariableUse: output += expression.ref.name
			Plus: output += '''«expression.left.resolve» + «expression.right.resolve»'''
			Minus: output += '''«expression.left.resolve» - «expression.right.resolve»'''
			Div: output += '''«expression.left.resolve» / «expression.right.resolve»'''
			Mult: output += '''«expression.left.resolve» * «expression.right.resolve»'''
		}
		return output
	}
	
}
